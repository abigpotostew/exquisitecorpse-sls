Resources:
  apiExecRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /my/default/path/
      RoleName: ${self:service}-${self:provider.stage}-apiExecRole # required if you want to use 'serverless deploy --function' later on
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ${self:service}-${self:provider.stage}-apiExecPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: "*"
              -  Effect: "Allow"
                 Action:
                   - "s3:GetObject*"
                   - "s3:ListObject*"
                   - "s3:PutObject*"
                 Resource:
                   Fn::Join:
                     - ""
                     - - "arn:aws:s3:::"
                       - "Ref" : "ImageBucket"
                       - "/*"
              -  Effect: "Allow"
                 Action:
                   - "s3:GetObject*"
                   - "s3:ListBucket"
                   - "s3:PutObject*"
                   - "s3:Head*"
                   - "s3:*"
                 Resource:
                   Fn::Join:
                     - ""
                     - - "arn:aws:s3:::"
                       - "Ref" : "GalleryBucket"
                       - "/*"
              -  Effect: "Allow"
                 Action:
                   - "s3:GetObject*"
                   - "s3:ListObject*"
                 Resource:
                   Fn::Join:
                     - ""
                     - - "arn:aws:s3:::"
                       - "Ref" : "StaticBucket"
                       - "/*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*"


#  clientExecRole:
#    Type: AWS::IAM::Role
#    Properties:
#      Path: /my/default/path/
#      RoleName: ${self:service}-${self:provider.stage}-clientExecRole # required if you want to use 'serverless deploy --function' later on
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action: sts:AssumeRole
#      # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
#      Policies:
#        - PolicyName: ${self:service}-${self:provider.stage}-clientExecPolicy
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
#                Action:
#                  - logs:CreateLogGroup
#                  - logs:CreateLogStream
#                  - logs:PutLogEvents
#                Resource:
#                  - 'Fn::Join':
#                      - ':'
#                      -
#                        - 'arn:aws:logs'
#                        - Ref: 'AWS::Region'
#                        - Ref: 'AWS::AccountId'
#                        - 'log-group:/aws/lambda/*:*:*'
#              - Effect: Allow
#                Action:
#                  - ec2:CreateNetworkInterface
#                  - ec2:DescribeNetworkInterfaces
#                  - ec2:DetachNetworkInterface
#                  - ec2:DeleteNetworkInterface
#                Resource: "*"
#              -  Effect: "Allow"
#                 Action:
#                   - "s3:GetObject*"
#                   - "s3:ListObject*"
#                 Resource:
#                   Fn::Join:
#                     - ""
#                     - - "arn:aws:s3:::"
#                       - "Ref" : "StaticBucket"
#                       - "/*"